<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux后台命令</title>
      <link href="/2022/09/26/linux-hou-tai-ming-ling/"/>
      <url>/2022/09/26/linux-hou-tai-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="这里记录终端后台操作命令："><a href="#这里记录终端后台操作命令：" class="headerlink" title="这里记录终端后台操作命令："></a>这里记录终端后台操作命令：</h1><h5 id="1-command-gt-ouk-file-2-gt-amp-1-amp"><a href="#1-command-gt-ouk-file-2-gt-amp-1-amp" class="headerlink" title="1.command &gt; ouk.file 2&gt;&amp;1 &amp;"></a>1.<code>command &gt; ouk.file 2&gt;&amp;1 &amp;</code></h5><p>后台运行命令，并且将输出重定向至文件，便于查看，缺点此时不占用终端，但终端关闭，命令停止</p><h5 id="2-nohup-command-amp"><a href="#2-nohup-command-amp" class="headerlink" title="2.nohup command &amp;"></a>2.<code>nohup command &amp;</code></h5><p>不挂起命令，关闭终端继续在后台执行</p><h5 id="3-nohup-command-gt-myout-file-2-gt-amp-1-amp"><a href="#3-nohup-command-gt-myout-file-2-gt-amp-1-amp" class="headerlink" title="3.nohup command &gt; myout.file 2&gt;&amp;1 &amp;"></a>3.<code>nohup command &gt; myout.file 2&gt;&amp;1 &amp;</code></h5><p>推荐方式，后台挂起，重定向输出命令</p><h2 id="控制后台命令"><a href="#控制后台命令" class="headerlink" title="控制后台命令"></a>控制后台命令</h2><p>jobs<br>查看当前有多少在后台运行的命令。<br>jobs -l选项可显示所有任务的PID，jobs的状态可以是running, stopped, Terminated。但是如果任务被终止了（kill），shell 从当前的shell环境已知的列表中删除任务的进程标识。</p><p>ctrl + z</p><p>暂停当前命令</p><p>fg</p><p>继续当前命令</p><p>ctrl + c</p><p>终端正在执行的命令</p><h5 id="修改环境变量"><a href="#修改环境变量" class="headerlink" title="修改环境变量"></a>修改环境变量</h5><p>常用修改当前用户环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bahrc</span><br><span class="line"><span class="comment"># 文件末尾添加路径</span></span><br><span class="line"><span class="built_in">export</span> PATH=/src/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># 使生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http协议</title>
      <link href="/2022/09/21/http-xie-yi/"/>
      <url>/2022/09/21/http-xie-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP协议："><a href="#HTTP协议：" class="headerlink" title="HTTP协议："></a>HTTP协议：</h2><p>HTTP 是一个基于 TCP/IP 通信协议来传递数据（HTML 文件、图片文件、查询结果等）</p><p>HTTP-&gt;http:// + 80</p><p>HTTPS-&gt;https:// + 443</p><h2 id="HTTP消息结构："><a href="#HTTP消息结构：" class="headerlink" title="HTTP消息结构："></a>HTTP消息结构：</h2><p>1.基于客户端/服务端（C/S）架构模型，是一个无状态请求/响应协议</p><p>2.HTTP使用统一资源标识符（Uniform Resource Identifiers，URI）来传输数据和建立连接</p><p>3.建立连接后，数据消息通过类似Internet邮件格式[RFC5322]和多用途Internet邮件拓展（MIME）[RFC2045]来传送。</p><h2 id="客户端请求消息："><a href="#客户端请求消息：" class="headerlink" title="客户端请求消息："></a>客户端请求消息：</h2><p><img src="image-20220921155013160-16637466215121.png"></p><p>即：<strong>请求行、请求头、空行、请求数据</strong></p><h2 id="服务器响应消息："><a href="#服务器响应消息：" class="headerlink" title="服务器响应消息："></a>服务器响应消息：</h2><p><strong>状态行、消息包头、空行、响应正文</strong></p><p><img src="image-20220921155253359-16637467759183-16637467790075.png"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>下面实例是一点典型的使用GET来传递数据的实例：</p><p>客户端请求：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /hello.txt HTTP/1.1</span><br><span class="line">User-Agent: curl/7.16.3 libcurl/7.16.3 OpenSSL/0.9.7l zlib/1.2.3</span><br><span class="line">Host: www.example.com</span><br><span class="line">Accept-Language: en, mi</span><br></pre></td></tr></table></figure><p>服务端响应:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 27 Jul 2009 12:28:53 GMT</span><br><span class="line">Server: Apache</span><br><span class="line">Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT</span><br><span class="line">ETag: &quot;34aa387-d-1568eb00&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Content-Length: 51</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">Content-Type: text/plain</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World! My payload includes a trailing CRLF.</span><br></pre></td></tr></table></figure><h2 id="HTTP请求方法（6种）："><a href="#HTTP请求方法（6种）：" class="headerlink" title="HTTP请求方法（6种）："></a>HTTP请求方法（6种）：</h2><table><thead><tr><th align="left">序号</th><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">GET</td><td align="left">请求指定的页面信息，并返回实体主体。</td></tr><tr><td align="left">2</td><td align="left">HEAD</td><td align="left">类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头</td></tr><tr><td align="left">3</td><td align="left">POST</td><td align="left">向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。</td></tr><tr><td align="left">4</td><td align="left">PUT</td><td align="left">从客户端向服务器传送的数据取代指定的文档的内容。</td></tr><tr><td align="left">5</td><td align="left">DELETE</td><td align="left">请求服务器删除指定的页面。</td></tr><tr><td align="left">6</td><td align="left">CONNECT</td><td align="left">HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。</td></tr><tr><td align="left">7</td><td align="left">OPTIONS</td><td align="left">允许客户端查看服务器的性能。</td></tr><tr><td align="left">8</td><td align="left">TRACE</td><td align="left">回显服务器收到的请求，主要用于测试或诊断。</td></tr><tr><td align="left">9</td><td align="left">PATCH</td><td align="left">是对 PUT 方法的补充，用来对已知资源进行局部更新 。</td></tr></tbody></table><h2 id="HTTP响应头信息："><a href="#HTTP响应头信息：" class="headerlink" title="HTTP响应头信息："></a>HTTP响应头信息：</h2><table><thead><tr><th align="left">应答头</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Allow</td><td align="left">服务器支持哪些请求方法（如GET、POST等）。</td></tr><tr><td align="left">Content-Encoding</td><td align="left">文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(“Accept-Encoding”)）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</td></tr><tr><td align="left">Content-Length</td><td align="left">表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</td></tr><tr><td align="left">Content-Type</td><td align="left">表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</td></tr><tr><td align="left">Date</td><td align="left">当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</td></tr><tr><td align="left">Expires</td><td align="left">应该在什么时候认为文档已经过期，从而不再缓存它？</td></tr><tr><td align="left">Last-Modified</td><td align="left">文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。</td></tr><tr><td align="left">Location</td><td align="left">表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</td></tr><tr><td align="left">Refresh</td><td align="left">表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(“Refresh”, “5; URL=<a href="http://host/path&quot;)%E8%AE%A9%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%BB%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%E9%A1%B5%E9%9D%A2%E3%80%82">http://host/path&quot;)让浏览器读取指定的页面。</a> 注意这种功能通常是通过设置HTML页面HEAD区的＜META HTTP-EQUIV=”Refresh” CONTENT=”5;URL=<a href="http://host/path&quot;%EF%BC%9E%E5%AE%9E%E7%8E%B0%EF%BC%8C%E8%BF%99%E6%98%AF%E5%9B%A0%E4%B8%BA%EF%BC%8C%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0%E6%88%96%E9%87%8D%E5%AE%9A%E5%90%91%E5%AF%B9%E4%BA%8E%E9%82%A3%E4%BA%9B%E4%B8%8D%E8%83%BD%E4%BD%BF%E7%94%A8CGI%E6%88%96Servlet%E7%9A%84HTML%E7%BC%96%E5%86%99%E8%80%85%E5%8D%81%E5%88%86%E9%87%8D%E8%A6%81%E3%80%82%E4%BD%86%E6%98%AF%EF%BC%8C%E5%AF%B9%E4%BA%8EServlet%E6%9D%A5%E8%AF%B4%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%AE%BE%E7%BD%AERefresh%E5%A4%B4%E6%9B%B4%E5%8A%A0%E6%96%B9%E4%BE%BF%E3%80%82">http://host/path&quot;＞实现，这是因为，自动刷新或重定向对于那些不能使用CGI或Servlet的HTML编写者十分重要。但是，对于Servlet来说，直接设置Refresh头更加方便。</a>  注意Refresh的意义是”N秒之后刷新本页面或访问指定页面”，而不是”每隔N秒刷新本页面或访问指定页面”。因此，连续刷新要求每次都发送一个Refresh头，而发送204状态代码则可以阻止浏览器继续刷新，不管是使用Refresh头还是＜META HTTP-EQUIV=”Refresh” …＞。  注意Refresh头不属于HTTP 1.1正式规范的一部分，而是一个扩展，但Netscape和IE都支持它。</td></tr><tr><td align="left">Server</td><td align="left">服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。</td></tr><tr><td align="left">Set-Cookie</td><td align="left">设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。</td></tr><tr><td align="left">WWW-Authenticate</td><td align="left">客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=＼”executives＼””)。 注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问（例如.htaccess）。</td></tr></tbody></table><h2 id="HTTP状态码："><a href="#HTTP状态码：" class="headerlink" title="HTTP状态码："></a>HTTP状态码：</h2><p>常见状态码：</p><ul><li><strong>200 - 请求成功</strong></li><li><strong>301 - 资源（网页等）被永久转移到其它URL</strong></li><li><strong>404 - 请求的资源（网页等）不存在</strong></li><li><strong>500 - 内部服务器错误</strong></li></ul><table><thead><tr><th align="left">分类</th><th align="left">分类描述</th></tr></thead><tbody><tr><td align="left">1**</td><td align="left">信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td align="left">2**</td><td align="left">成功，操作被成功接收并处理</td></tr><tr><td align="left">3**</td><td align="left">重定向，需要进一步的操作以完成请求</td></tr><tr><td align="left">4**</td><td align="left">客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td align="left">5**</td><td align="left">服务器错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> cs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CD-hit安装及使用</title>
      <link href="/2022/09/21/cd-hit-an-zhuang-ji-shi-yong/"/>
      <url>/2022/09/21/cd-hit-an-zhuang-ji-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="CD-hit安装及使用"><a href="#CD-hit安装及使用" class="headerlink" title="CD-hit安装及使用"></a>CD-hit安装及使用</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h4 id="cd-hit下载："><a href="#cd-hit下载：" class="headerlink" title="cd-hit下载："></a>cd-hit下载：</h4><p>网址：<a href="https://github.com/weizhongli/cdhit/releases">https://github.com/weizhongli/cdhit/releases</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载ch-hit</span></span><br><span class="line">wget https://github.com/weizhongli/cdhit/releases/download/V4.8.1/cd-hit-v4.8.1-2019-0228.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf cd-hit-v4.8.1-2019-0228.tar.gz</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译</span></span><br><span class="line">cd cd-hit-auxtools</span><br><span class="line">make</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd-hit -i nr -o nr100 -c 1.00 -n 5 -M 16000 –d 0 -T 8</span><br><span class="line">cd-hit -i db -o db90 -c 0.9 -n 5 -M 16000 –d 0 -T 8</span><br><span class="line"><span class="built_in">where</span></span><br><span class="line">db is the filename of input,</span><br><span class="line">db90 is output, </span><br><span class="line">-c 1.0, means 100% identity, is the clustering threshold</span><br><span class="line">-c 0.9, means 90% identity, is the clustering threshold</span><br><span class="line">-n 5 is the word size</span><br><span class="line">-d 0 use sequence name <span class="keyword">in</span> fasta header till the first white space</span><br><span class="line">-M 16000, to use 16GB RAM</span><br><span class="line">-T 8, to use 8 threads</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Choose of word size:</span><br><span class="line">-n 5 for thresholds 0.7 ~ 1.0</span><br><span class="line">-n 4 for thresholds 0.6 ~ 0.7</span><br><span class="line">-n 3 for thresholds 0.5 ~ 0.6</span><br><span class="line">-n 2 for thresholds 0.4 ~ 0.5</span><br></pre></td></tr></table></figure><h4 id="需查看更多选项："><a href="#需查看更多选项：" class="headerlink" title="需查看更多选项："></a>需查看更多选项：</h4><p><code>cd-hit -h</code></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux Bioinformatics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MetaGeneS</title>
      <link href="/2022/09/20/metagenes/"/>
      <url>/2022/09/20/metagenes/</url>
      
        <content type="html"><![CDATA[<h1 id="MetaGeneS"><a href="#MetaGeneS" class="headerlink" title="MetaGeneS"></a>MetaGeneS</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># gff文件一共9列，分别如下：</span><br><span class="line">①seqid（序列ID）：通常为染色体的ID；</span><br><span class="line">②source（注释的来源）：表示产生此文件的软件或方法；</span><br><span class="line">③type（类型）：表示区间特性类型，如gene，repeat_region，exon，CDS等；</span><br><span class="line">④start（起始位点）：特征区间的起始位置；</span><br><span class="line">⑤end（结束位点）：特征区间的终止位置；</span><br><span class="line">⑥score（得分）：表示注释信息可靠性；</span><br><span class="line">⑦strand（正/负链）：&quot;＋&quot;：正链，&quot;－&quot;：负链；</span><br><span class="line">⑧phase（步进）：对于编码蛋白质的CDS，本列指定下一个密码子开始的位置。可以是0，1，2。表示到达下一个密码子要跳过的碱基个数;</span><br><span class="line">⑨attribut（属性）：基因ID，长度等信息；多个属性之间用&quot;;&quot;分号分隔。</span><br></pre></td></tr></table></figure><h5 id="结果文件"><a href="#结果文件" class="headerlink" title="结果文件"></a>结果文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Escherichia_coli.gff #储存基因结构信息</span><br><span class="line">Escherichia_coli_gene.fasta #预测基因组的核苷酸序列</span><br><span class="line">Escherichia_coli_protein.fasta #预测基因组的蛋白质序列</span><br></pre></td></tr></table></figure><h5 id="下载方法"><a href="#下载方法" class="headerlink" title="下载方法"></a>下载方法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 下载软件和密钥</span><br><span class="line">wget http://topaz.gatech.edu/GeneMark/tmp/GMtool_dHlO8/gms2_linux_64.tar.gz</span><br><span class="line">wget http://topaz.gatech.edu/GeneMark/tmp/GMtool_dHlO8/gm_key_64.gz</span><br><span class="line"># 解压软件</span><br><span class="line">tar -zxvf gms2_linux_64.tar.gz</span><br><span class="line">gunzip -c gm_key_64.gz &gt; ~/.gmhmmp2_key</span><br><span class="line"># 将软件添加到环境变量</span><br><span class="line">vim ~/.bashrc</span><br><span class="line">PATH=$PATH:/opt/biosoft/gms2_linux_64</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><h5 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://exon.gatech.edu/GeneMark/</span><br></pre></td></tr></table></figure><p><img src="wlop-43se.jpg"></p><p><img src="MetaGeneS/image-20220927175255611.png" alt="image-20220927175255611"></p><h3 id="使用-RAPT-组装和注释您的原核基因组"><a href="#使用-RAPT-组装和注释您的原核基因组" class="headerlink" title="使用 RAPT 组装和注释您的原核基因组"></a>使用 RAPT 组装和注释您的原核基因组</h3><p>读取组装和注释管道工具 (RAPT) 是一种易于使用的试点服务，用于从<strong>细菌或古细菌分离物</strong>测序的公共或私人 Illumina 基因组读取的<em><strong>从头*组装和基因注释</strong>。RAPT 由三个主要组件组成，即基因组组装器 <a href="https://pubmed.ncbi.nlm.nih.gov/30286803/">SKESA</a>、分类分配工具 <a href="https://pubmed.ncbi.nlm.nih.gov/29792589/">ANI</a>和原核基因组注释管道 ( <a href="https://pubmed.ncbi.nlm.nih.gov/27342282/">PGAP</a> )，并在几个小时内生成</em><em>质量与 RefSeq 相当的注释基因组（</em>*<a href="https://www.ncbi.nlm.nih.gov/rapt/documentation/">了解有关 RAPT</a>的更多信息）。</p><p>使用 RAPT，您将：</p><ul><li><strong>将您的读数组装</strong>成重叠群</li><li>为程序集<strong>分配一个学名</strong></li><li>根据专家策划的数据（例如隐马尔可夫模型和保守域架构） <em>从头</em><strong>预测编码和非编码基因，包括抗微生物耐药性 (AMR) 基因和毒力因子</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> linux machine learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> machine learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket进程间通信</title>
      <link href="/2022/09/20/socket-jin-cheng-jian-tong-xin/"/>
      <url>/2022/09/20/socket-jin-cheng-jian-tong-xin/</url>
      
        <content type="html"><![CDATA[<h1 id="socket进程间通信"><a href="#socket进程间通信" class="headerlink" title="socket进程间通信"></a>socket进程间通信</h1><h2 id="1-本地进程间通信（IPC）："><a href="#1-本地进程间通信（IPC）：" class="headerlink" title="1.本地进程间通信（IPC）："></a>1.本地进程间通信（IPC）：</h2><p>​        消息传递（管道、FIFO、消息队列）</p><p>​        同步（互斥量、条件变量、读写锁、文件和写记录锁、信号量）</p><p>​        共享内存（匿名和具名，mail）</p><p>​        远程过程调用（Solaris门和Sun RPC）</p><h2 id="2-socket基本操作"><a href="#2-socket基本操作" class="headerlink" title="2.socket基本操作"></a>2.socket基本操作</h2><h5 id="socket-函数："><a href="#socket-函数：" class="headerlink" title="socket()函数："></a>socket()函数：</h5><p><code>int socket(int domain, int type, int protocol);</code></p><ul><li>domain：即协议域，又称为协议族（family）。常用的协议族有，AF_INET、AF_INET6、AF_LOCAL（或称AF_UNIX，Unix域socket）、AF_ROUTE等等。协议族决定了socket的地址类型，在通信中必须采用对应的地址，如AF_INET决定了要用ipv4地址（32位的）与端口号（16位的）的组合、AF_UNIX决定了要用一个绝对路径名作为地址。</li><li>type：指定socket类型。常用的socket类型有，SOCK_STREAM、SOCK_DGRAM、SOCK_RAW、SOCK_PACKET、SOCK_SEQPACKET等等（socket的类型有哪些？）。</li><li>protocol：故名思意，就是指定协议。常用的协议有，IPPROTO_TCP、IPPTOTO_UDP、IPPROTO_SCTP、IPPROTO_TIPC等，它们分别对应TCP传输协议、UDP传输协议、STCP传输协议、TIPC传输协议。</li></ul><h2 id="3-socket中TCP三次握手"><a href="#3-socket中TCP三次握手" class="headerlink" title="3.socket中TCP三次握手"></a>3.socket中TCP三次握手</h2><ul><li>客户端向服务器发送一个SYN J</li><li>服务器向客户端响应一个SYN K，并对SYN J进行确认ACK J+1</li><li>客户端再想服务器发一个确认ACK K+1</li></ul><p><img src="97209d9c3394eb4cf950be75ffc38c56.jpg" alt="meinv"></p>]]></content>
      
      
      <categories>
          
          <category> web net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>grep笔记</title>
      <link href="/2022/09/19/grep-bi-ji/"/>
      <url>/2022/09/19/grep-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="grep用法："><a href="#grep用法：" class="headerlink" title="grep用法："></a>grep用法：</h1><h3 id="定义：用于文本查找"><a href="#定义：用于文本查找" class="headerlink" title="定义：用于文本查找"></a>定义：用于文本查找</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#从file中查找带有‘keyword’关键字的行</span></span><br><span class="line">$ grep keyword file</span><br><span class="line">└─$ grep L unicom.sh </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello from LG, thanks for testing.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#从多个文件中查找关键字</span></span><br><span class="line"><span class="string">$ grep keyword file1 file2 file3</span></span><br><span class="line"><span class="string">└─$ grep -l for  unicom.sh</span></span><br><span class="line"><span class="string">unicom.sh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#递归查找目标文件夹中所有目标信息的文件，并可实现精确过滤</span></span><br><span class="line"><span class="string">$ grep -r for ./file    </span></span><br><span class="line"><span class="string">./file/unicom.sh:echo &quot;</span>Hello from LG, thanks <span class="keyword">for</span> testing.</span><br><span class="line">                                                                                      </span><br><span class="line">$ grep -r <span class="keyword">for</span> ./file | grep DEVICE</span><br><span class="line">                                                                                       </span><br><span class="line">$ grep -r <span class="keyword">for</span> ./file | grep sh    </span><br><span class="line">./file/unicom.sh:<span class="built_in">echo</span> <span class="string">&quot;Hello from LG, thanks for testing.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#加入 -v 参数，反转grep匹配</span></span><br><span class="line"><span class="string">$ grep -v keyword file</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux Typroya Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My blog</title>
      <link href="/2022/09/18/blog-one/"/>
      <url>/2022/09/18/blog-one/</url>
      
        <content type="html"><![CDATA[<h1 id="首次尝试"><a href="#首次尝试" class="headerlink" title="首次尝试"></a>首次尝试</h1><p>啥内容也没有</p><p><img src="wlop-43se-16636698332782.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> Blogs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> first attempt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/09/18/hello-world/"/>
      <url>/2022/09/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
